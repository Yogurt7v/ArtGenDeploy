stages:
  - install
  - build
  - build_docker
  - test
  - deploy

Npm ci:
  stage: install
  image: node:18
  script:
    - cd frontend
    - npm ci
  cache:
    policy: push
    key: ${CI_COMMIT_REF_SLUG} -modules
    paths:
      - 'frontend/node_modules'

Build:
  stage: build
  image: node:18
  script:
    - cd frontend
    - npm run build
  cache:
    - key: ${CI_COMMIT_REF_SLUG} -modules
      policy: pull
      paths:
        - 'frontend/node_modules'
    - key: ${CI_COMMIT_REF_SLUG} -build
      policy: push
      paths:
        - 'frontend/build'
Test:
  stage: test
  image: node:18
  script:
    - cd frontend
    - npm run test
  cache:
    policy: pull
    key: ${CI_COMMIT_REF_SLUG} -modules
    paths:
      - 'frontend/node_modules'

Build docker:
  stage: build_docker
  image: docker
  services:
    - docker:dind
  variables:
    IMAGE_NAME: yogurt7v/art-generator-nginx
  only: main
  when: manual
  script:
    - docker login -u ${CI_USER} -p ${CI_PASSWORD}
    - docker build -f frontend.dockerfile -t ${IMAGE_NAME} .
    - docker push ${IMAGE_NAME}IMAGE_NAME
  cache:
    policy: pull
    key: ${CI_COMMIT_REF_SLUG} -build
    paths:
      - 'frontend/build'

Deploy:
  stage: deploy
  only:
    - main
  when: manual
  image: ringcentral/sshpass
  script:
    - sshpass -p ${SSH_PASS} ssh ${SSH_HOST} -o stricthostkeychecking=no "
    - cd ArtGenDeploy &&
    - git pull &&
    - docker compose pull nginx &&
    - docker compose stop nginx &&
    - docker compose up -d nginx "
  cache:
    policy: pull
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - 'frontend/node_modules'
